// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_AirplaneDetection_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_Location_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusWithoutDynamicConditions_Location_status_2eproto;
namespace moos {
namespace dawg {
class Status_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status_Location> _instance;
} _Status_Location_default_instance_;
class Status_AirplaneDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status_AirplaneDetection> _instance;
} _Status_AirplaneDetection_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class StatusWithoutDynamicConditions_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusWithoutDynamicConditions_Location> _instance;
} _StatusWithoutDynamicConditions_Location_default_instance_;
class StatusWithoutDynamicConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusWithoutDynamicConditions> _instance;
} _StatusWithoutDynamicConditions_default_instance_;
}  // namespace dawg
}  // namespace moos
static void InitDefaultsscc_info_Status_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::dawg::_Status_default_instance_;
    new (ptr) ::moos::dawg::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::dawg::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Status_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Status_status_2eproto}, {
      &scc_info_Status_Location_status_2eproto.base,
      &scc_info_Status_AirplaneDetection_status_2eproto.base,}};

static void InitDefaultsscc_info_Status_AirplaneDetection_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::dawg::_Status_AirplaneDetection_default_instance_;
    new (ptr) ::moos::dawg::Status_AirplaneDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::dawg::Status_AirplaneDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_AirplaneDetection_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_AirplaneDetection_status_2eproto}, {}};

static void InitDefaultsscc_info_Status_Location_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::dawg::_Status_Location_default_instance_;
    new (ptr) ::moos::dawg::Status_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::dawg::Status_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_Location_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_Location_status_2eproto}, {}};

static void InitDefaultsscc_info_StatusWithoutDynamicConditions_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::dawg::_StatusWithoutDynamicConditions_default_instance_;
    new (ptr) ::moos::dawg::StatusWithoutDynamicConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::dawg::StatusWithoutDynamicConditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatusWithoutDynamicConditions_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatusWithoutDynamicConditions_status_2eproto}, {
      &scc_info_StatusWithoutDynamicConditions_Location_status_2eproto.base,
      &scc_info_Status_AirplaneDetection_status_2eproto.base,}};

static void InitDefaultsscc_info_StatusWithoutDynamicConditions_Location_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::dawg::_StatusWithoutDynamicConditions_Location_default_instance_;
    new (ptr) ::moos::dawg::StatusWithoutDynamicConditions_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::dawg::StatusWithoutDynamicConditions_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusWithoutDynamicConditions_Location_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusWithoutDynamicConditions_Location_status_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_status_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_status_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_status_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_status_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_Location, x_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_Location, y_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_Location, depth_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_AirplaneDetection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_AirplaneDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_AirplaneDetection, detected_depth_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status_AirplaneDetection, detected_freq_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, type_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, location_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, temperature_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::Status, airplane_detection_),
  3,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions_Location, x_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions_Location, y_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions_Location, depth_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, type_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, location_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, temperature_),
  PROTOBUF_FIELD_OFFSET(::moos::dawg::StatusWithoutDynamicConditions, airplane_detection_),
  3,
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::moos::dawg::Status_Location)},
  { 11, 18, sizeof(::moos::dawg::Status_AirplaneDetection)},
  { 20, 29, sizeof(::moos::dawg::Status)},
  { 33, 41, sizeof(::moos::dawg::StatusWithoutDynamicConditions_Location)},
  { 44, 53, sizeof(::moos::dawg::StatusWithoutDynamicConditions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::dawg::_Status_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::dawg::_Status_AirplaneDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::dawg::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::dawg::_StatusWithoutDynamicConditions_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::dawg::_StatusWithoutDynamicConditions_default_instance_),
};

const char descriptor_table_protodef_status_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014status.proto\022\tmoos.dawg\032\034dccl/option_e"
  "xtensions.proto\"\336\006\n\006Status\022+\n\004type\030\001 \002(\016"
  "2\035.moos.dawg.Status.VehicleType\022,\n\010locat"
  "ion\030\002 \002(\0132\032.moos.dawg.Status.Location\022\211\001"
  "\n\013temperature\030\003 \001(\001Bt\242\?q)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000"
  "D@a{\024\256G\341z\204\?\362\001\030\022\013temperature\032\007celsius \000\302\002"
  "8\0326this.type == \'AUV_WITH_CTD\' or this.t"
  "ype == \'DEEP_AUV\'\022f\n\022airplane_detection\030"
  "\004 \001(\0132#.moos.dawg.Status.AirplaneDetecti"
  "onB%\242\?\"\302\002\037\032\035this.type == \'AUV_WITH_SONAR"
  "\'\032\212\002\n\010Location\0224\n\001x\030\001 \002(\005B)\242\?&)\000\000\000\000\000\210\303\3001"
  "\000\000\000\000\000\210\303@a\000\000\000\000\000\000\360\?\362\001\010\022\006length\0224\n\001y\030\002 \002(\005B"
  ")\242\?&)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@a\000\000\000\000\000\000\360\?\362\001\010\022\006leng"
  "th\022\221\001\n\005depth\030\003 \001(\005B\201\001\242\?~)\000\000\000\000\000\000\000\0001\000\000\000\000\000\210"
  "\263@a\232\231\231\231\231\231\271\?\362\001\010\022\006length\302\002U\022\022root.type == "
  "\'USV\'Z\?if root.type == \'DEEP_AUV\' then r"
  "eturn 5000 else return 100 end\032\233\001\n\021Airpl"
  "aneDetection\022A\n\016detected_depth\030\001 \002(\005B)\242\?"
  "&)\000\000\000\000\000\000\000\0001\000\000\000\000\000\210\263@a\232\231\231\231\231\231\271\?\362\001\010\022\006length\022"
  "C\n\rdetected_freq\030\002 \002(\005B,\242\?))\000\000\000\000\000L\335@1\000\000\000"
  "\000\000\210\343@a\000\000\000\000\000\000Y@\362\001\013\022\tfrequency\"J\n\013VehicleT"
  "ype\022\007\n\003USV\020\001\022\020\n\014AUV_WITH_CTD\020\002\022\022\n\016AUV_WI"
  "TH_SONAR\020\003\022\014\n\010DEEP_AUV\020\004:\016\242\?\013\010~\020 (\004\362\001\002si"
  "\"\323\003\n\036StatusWithoutDynamicConditions\022+\n\004t"
  "ype\030\001 \002(\0162\035.moos.dawg.Status.VehicleType"
  "\022D\n\010location\030\002 \002(\01322.moos.dawg.StatusWit"
  "houtDynamicConditions.Location\022N\n\013temper"
  "ature\030\003 \001(\001B9\242\?6)\000\000\000\000\000\000\000\0001\000\000\000\000\000\000D@a{\024\256G\341"
  "z\204\?\362\001\030\022\013temperature\032\007celsius \000\022\?\n\022airpla"
  "ne_detection\030\004 \001(\0132#.moos.dawg.Status.Ai"
  "rplaneDetection\032\234\001\n\010Location\0224\n\001x\030\001 \002(\005B"
  ")\242\?&)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@a\000\000\000\000\000\000\360\?\362\001\010\022\006leng"
  "th\0224\n\001y\030\002 \002(\005B)\242\?&)\000\000\000\000\000\210\303\3001\000\000\000\000\000\210\303@a\000\000\000"
  "\000\000\000\360\?\362\001\010\022\006length\022$\n\005depth\030\003 \001(\005B\025\242\?\022)\000\000\000"
  "\000\000\000\000\0001\000\000\000\000\000\210\263@:\016\242\?\013\010\177\020 (\003\362\001\002si"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_status_2eproto_deps[1] = {
  &::descriptor_table_dccl_2foption_5fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_status_2eproto_sccs[5] = {
  &scc_info_Status_status_2eproto.base,
  &scc_info_Status_AirplaneDetection_status_2eproto.base,
  &scc_info_Status_Location_status_2eproto.base,
  &scc_info_StatusWithoutDynamicConditions_status_2eproto.base,
  &scc_info_StatusWithoutDynamicConditions_Location_status_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_status_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto = {
  false, false, descriptor_table_protodef_status_2eproto, "status.proto", 1390,
  &descriptor_table_status_2eproto_once, descriptor_table_status_2eproto_sccs, descriptor_table_status_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_status_2eproto::offsets,
  file_level_metadata_status_2eproto, 5, file_level_enum_descriptors_status_2eproto, file_level_service_descriptors_status_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_status_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_status_2eproto)), true);
namespace moos {
namespace dawg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_VehicleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_status_2eproto);
  return file_level_enum_descriptors_status_2eproto[0];
}
bool Status_VehicleType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Status_VehicleType Status::USV;
constexpr Status_VehicleType Status::AUV_WITH_CTD;
constexpr Status_VehicleType Status::AUV_WITH_SONAR;
constexpr Status_VehicleType Status::DEEP_AUV;
constexpr Status_VehicleType Status::VehicleType_MIN;
constexpr Status_VehicleType Status::VehicleType_MAX;
constexpr int Status::VehicleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Status_Location::InitAsDefaultInstance() {
}
class Status_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Status_Location>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Status_Location::Status_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.dawg.Status.Location)
}
Status_Location::Status_Location(const Status_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&x_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:moos.dawg.Status.Location)
}

void Status_Location::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&x_)) + sizeof(depth_));
}

Status_Location::~Status_Location() {
  // @@protoc_insertion_point(destructor:moos.dawg.Status.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status_Location::ArenaDtor(void* object) {
  Status_Location* _this = reinterpret_cast< Status_Location* >(object);
  (void)_this;
}
void Status_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status_Location& Status_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_Location_status_2eproto.base);
  return *internal_default_instance();
}


void Status_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.dawg.Status.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_) -
        reinterpret_cast<char*>(&x_)) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1 [(.dccl.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2 [(.dccl.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 3 [(.dccl.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.dawg.Status.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 depth = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.dawg.Status.Location)
  return target;
}

size_t Status_Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:moos.dawg.Status.Location)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t Status_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.dawg.Status.Location)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 depth = 3 [(.dccl.field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.dawg.Status.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Status_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.dawg.Status.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.dawg.Status.Location)
    MergeFrom(*source);
  }
}

void Status_Location::MergeFrom(const Status_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.dawg.Status.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.dawg.Status.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status_Location::CopyFrom(const Status_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.dawg.Status.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status_Location::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Status_Location::InternalSwap(Status_Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status_Location, depth_)
      + sizeof(Status_Location::depth_)
      - PROTOBUF_FIELD_OFFSET(Status_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status_AirplaneDetection::InitAsDefaultInstance() {
}
class Status_AirplaneDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<Status_AirplaneDetection>()._has_bits_);
  static void set_has_detected_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detected_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Status_AirplaneDetection::Status_AirplaneDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.dawg.Status.AirplaneDetection)
}
Status_AirplaneDetection::Status_AirplaneDetection(const Status_AirplaneDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&detected_depth_, &from.detected_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&detected_freq_) -
    reinterpret_cast<char*>(&detected_depth_)) + sizeof(detected_freq_));
  // @@protoc_insertion_point(copy_constructor:moos.dawg.Status.AirplaneDetection)
}

void Status_AirplaneDetection::SharedCtor() {
  ::memset(&detected_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detected_freq_) -
      reinterpret_cast<char*>(&detected_depth_)) + sizeof(detected_freq_));
}

Status_AirplaneDetection::~Status_AirplaneDetection() {
  // @@protoc_insertion_point(destructor:moos.dawg.Status.AirplaneDetection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status_AirplaneDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status_AirplaneDetection::ArenaDtor(void* object) {
  Status_AirplaneDetection* _this = reinterpret_cast< Status_AirplaneDetection* >(object);
  (void)_this;
}
void Status_AirplaneDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status_AirplaneDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status_AirplaneDetection& Status_AirplaneDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_AirplaneDetection_status_2eproto.base);
  return *internal_default_instance();
}


void Status_AirplaneDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.dawg.Status.AirplaneDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&detected_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&detected_freq_) -
        reinterpret_cast<char*>(&detected_depth_)) + sizeof(detected_freq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status_AirplaneDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 detected_depth = 1 [(.dccl.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_detected_depth(&has_bits);
          detected_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 detected_freq = 2 [(.dccl.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_detected_freq(&has_bits);
          detected_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status_AirplaneDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.dawg.Status.AirplaneDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 detected_depth = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_detected_depth(), target);
  }

  // required int32 detected_freq = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_detected_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.dawg.Status.AirplaneDetection)
  return target;
}

size_t Status_AirplaneDetection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:moos.dawg.Status.AirplaneDetection)
  size_t total_size = 0;

  if (_internal_has_detected_depth()) {
    // required int32 detected_depth = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detected_depth());
  }

  if (_internal_has_detected_freq()) {
    // required int32 detected_freq = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detected_freq());
  }

  return total_size;
}
size_t Status_AirplaneDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.dawg.Status.AirplaneDetection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 detected_depth = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detected_depth());

    // required int32 detected_freq = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detected_freq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status_AirplaneDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.dawg.Status.AirplaneDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const Status_AirplaneDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status_AirplaneDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.dawg.Status.AirplaneDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.dawg.Status.AirplaneDetection)
    MergeFrom(*source);
  }
}

void Status_AirplaneDetection::MergeFrom(const Status_AirplaneDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.dawg.Status.AirplaneDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      detected_depth_ = from.detected_depth_;
    }
    if (cached_has_bits & 0x00000002u) {
      detected_freq_ = from.detected_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status_AirplaneDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.dawg.Status.AirplaneDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status_AirplaneDetection::CopyFrom(const Status_AirplaneDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.dawg.Status.AirplaneDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status_AirplaneDetection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Status_AirplaneDetection::InternalSwap(Status_AirplaneDetection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status_AirplaneDetection, detected_freq_)
      + sizeof(Status_AirplaneDetection::detected_freq_)
      - PROTOBUF_FIELD_OFFSET(Status_AirplaneDetection, detected_depth_)>(
          reinterpret_cast<char*>(&detected_depth_),
          reinterpret_cast<char*>(&other->detected_depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status_AirplaneDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
  ::moos::dawg::_Status_default_instance_._instance.get_mutable()->location_ = const_cast< ::moos::dawg::Status_Location*>(
      ::moos::dawg::Status_Location::internal_default_instance());
  ::moos::dawg::_Status_default_instance_._instance.get_mutable()->airplane_detection_ = const_cast< ::moos::dawg::Status_AirplaneDetection*>(
      ::moos::dawg::Status_AirplaneDetection::internal_default_instance());
}
class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::moos::dawg::Status_Location& location(const Status* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::moos::dawg::Status_AirplaneDetection& airplane_detection(const Status* msg);
  static void set_has_airplane_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::moos::dawg::Status_Location&
Status::_Internal::location(const Status* msg) {
  return *msg->location_;
}
const ::moos::dawg::Status_AirplaneDetection&
Status::_Internal::airplane_detection(const Status* msg) {
  return *msg->airplane_detection_;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.dawg.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::moos::dawg::Status_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_airplane_detection()) {
    airplane_detection_ = new ::moos::dawg::Status_AirplaneDetection(*from.airplane_detection_);
  } else {
    airplane_detection_ = nullptr;
  }
  ::memcpy(&temperature_, &from.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&temperature_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:moos.dawg.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_status_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&location_)) + sizeof(temperature_));
  type_ = 1;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:moos.dawg.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete airplane_detection_;
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_status_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.dawg.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(airplane_detection_ != nullptr);
      airplane_detection_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    temperature_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .moos.dawg.Status.VehicleType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::moos::dawg::Status_VehicleType_IsValid(val))) {
            _internal_set_type(static_cast<::moos::dawg::Status_VehicleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .moos.dawg.Status.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double temperature = 3 [(.dccl.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4 [(.dccl.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_airplane_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.dawg.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .moos.dawg.Status.VehicleType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .moos.dawg.Status.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional double temperature = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_temperature(), target);
  }

  // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::airplane_detection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.dawg.Status)
  return target;
}

size_t Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:moos.dawg.Status)
  size_t total_size = 0;

  if (_internal_has_location()) {
    // required .moos.dawg.Status.Location location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_internal_has_type()) {
    // required .moos.dawg.Status.VehicleType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.dawg.Status)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .moos.dawg.Status.Location location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);

    // required .moos.dawg.Status.VehicleType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4 [(.dccl.field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *airplane_detection_);
    }

    // optional double temperature = 3 [(.dccl.field) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.dawg.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.dawg.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.dawg.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.dawg.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::moos::dawg::Status_Location::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_airplane_detection()->::moos::dawg::Status_AirplaneDetection::MergeFrom(from._internal_airplane_detection());
    }
    if (cached_has_bits & 0x00000004u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.dawg.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.dawg.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_airplane_detection()) {
    if (!airplane_detection_->IsInitialized()) return false;
  }
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, temperature_)
      + sizeof(Status::temperature_)
      - PROTOBUF_FIELD_OFFSET(Status, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusWithoutDynamicConditions_Location::InitAsDefaultInstance() {
}
class StatusWithoutDynamicConditions_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusWithoutDynamicConditions_Location>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StatusWithoutDynamicConditions_Location::StatusWithoutDynamicConditions_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.dawg.StatusWithoutDynamicConditions.Location)
}
StatusWithoutDynamicConditions_Location::StatusWithoutDynamicConditions_Location(const StatusWithoutDynamicConditions_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&x_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:moos.dawg.StatusWithoutDynamicConditions.Location)
}

void StatusWithoutDynamicConditions_Location::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&x_)) + sizeof(depth_));
}

StatusWithoutDynamicConditions_Location::~StatusWithoutDynamicConditions_Location() {
  // @@protoc_insertion_point(destructor:moos.dawg.StatusWithoutDynamicConditions.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusWithoutDynamicConditions_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusWithoutDynamicConditions_Location::ArenaDtor(void* object) {
  StatusWithoutDynamicConditions_Location* _this = reinterpret_cast< StatusWithoutDynamicConditions_Location* >(object);
  (void)_this;
}
void StatusWithoutDynamicConditions_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusWithoutDynamicConditions_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusWithoutDynamicConditions_Location& StatusWithoutDynamicConditions_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusWithoutDynamicConditions_Location_status_2eproto.base);
  return *internal_default_instance();
}


void StatusWithoutDynamicConditions_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_) -
        reinterpret_cast<char*>(&x_)) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusWithoutDynamicConditions_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1 [(.dccl.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2 [(.dccl.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 3 [(.dccl.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusWithoutDynamicConditions_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1 [(.dccl.field) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2 [(.dccl.field) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 depth = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.dawg.StatusWithoutDynamicConditions.Location)
  return target;
}

size_t StatusWithoutDynamicConditions_Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t StatusWithoutDynamicConditions_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2 [(.dccl.field) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 depth = 3 [(.dccl.field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusWithoutDynamicConditions_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusWithoutDynamicConditions_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusWithoutDynamicConditions_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.dawg.StatusWithoutDynamicConditions.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.dawg.StatusWithoutDynamicConditions.Location)
    MergeFrom(*source);
  }
}

void StatusWithoutDynamicConditions_Location::MergeFrom(const StatusWithoutDynamicConditions_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatusWithoutDynamicConditions_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusWithoutDynamicConditions_Location::CopyFrom(const StatusWithoutDynamicConditions_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.dawg.StatusWithoutDynamicConditions.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusWithoutDynamicConditions_Location::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StatusWithoutDynamicConditions_Location::InternalSwap(StatusWithoutDynamicConditions_Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusWithoutDynamicConditions_Location, depth_)
      + sizeof(StatusWithoutDynamicConditions_Location::depth_)
      - PROTOBUF_FIELD_OFFSET(StatusWithoutDynamicConditions_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusWithoutDynamicConditions_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusWithoutDynamicConditions::InitAsDefaultInstance() {
  ::moos::dawg::_StatusWithoutDynamicConditions_default_instance_._instance.get_mutable()->location_ = const_cast< ::moos::dawg::StatusWithoutDynamicConditions_Location*>(
      ::moos::dawg::StatusWithoutDynamicConditions_Location::internal_default_instance());
  ::moos::dawg::_StatusWithoutDynamicConditions_default_instance_._instance.get_mutable()->airplane_detection_ = const_cast< ::moos::dawg::Status_AirplaneDetection*>(
      ::moos::dawg::Status_AirplaneDetection::internal_default_instance());
}
class StatusWithoutDynamicConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusWithoutDynamicConditions>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::moos::dawg::StatusWithoutDynamicConditions_Location& location(const StatusWithoutDynamicConditions* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::moos::dawg::Status_AirplaneDetection& airplane_detection(const StatusWithoutDynamicConditions* msg);
  static void set_has_airplane_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::moos::dawg::StatusWithoutDynamicConditions_Location&
StatusWithoutDynamicConditions::_Internal::location(const StatusWithoutDynamicConditions* msg) {
  return *msg->location_;
}
const ::moos::dawg::Status_AirplaneDetection&
StatusWithoutDynamicConditions::_Internal::airplane_detection(const StatusWithoutDynamicConditions* msg) {
  return *msg->airplane_detection_;
}
StatusWithoutDynamicConditions::StatusWithoutDynamicConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.dawg.StatusWithoutDynamicConditions)
}
StatusWithoutDynamicConditions::StatusWithoutDynamicConditions(const StatusWithoutDynamicConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::moos::dawg::StatusWithoutDynamicConditions_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_airplane_detection()) {
    airplane_detection_ = new ::moos::dawg::Status_AirplaneDetection(*from.airplane_detection_);
  } else {
    airplane_detection_ = nullptr;
  }
  ::memcpy(&temperature_, &from.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&temperature_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:moos.dawg.StatusWithoutDynamicConditions)
}

void StatusWithoutDynamicConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusWithoutDynamicConditions_status_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&location_)) + sizeof(temperature_));
  type_ = 1;
}

StatusWithoutDynamicConditions::~StatusWithoutDynamicConditions() {
  // @@protoc_insertion_point(destructor:moos.dawg.StatusWithoutDynamicConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusWithoutDynamicConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete airplane_detection_;
}

void StatusWithoutDynamicConditions::ArenaDtor(void* object) {
  StatusWithoutDynamicConditions* _this = reinterpret_cast< StatusWithoutDynamicConditions* >(object);
  (void)_this;
}
void StatusWithoutDynamicConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusWithoutDynamicConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusWithoutDynamicConditions& StatusWithoutDynamicConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusWithoutDynamicConditions_status_2eproto.base);
  return *internal_default_instance();
}


void StatusWithoutDynamicConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.dawg.StatusWithoutDynamicConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(airplane_detection_ != nullptr);
      airplane_detection_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    temperature_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusWithoutDynamicConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .moos.dawg.Status.VehicleType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::moos::dawg::Status_VehicleType_IsValid(val))) {
            _internal_set_type(static_cast<::moos::dawg::Status_VehicleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double temperature = 3 [(.dccl.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_airplane_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusWithoutDynamicConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.dawg.StatusWithoutDynamicConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .moos.dawg.Status.VehicleType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional double temperature = 3 [(.dccl.field) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_temperature(), target);
  }

  // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::airplane_detection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.dawg.StatusWithoutDynamicConditions)
  return target;
}

size_t StatusWithoutDynamicConditions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:moos.dawg.StatusWithoutDynamicConditions)
  size_t total_size = 0;

  if (_internal_has_location()) {
    // required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_internal_has_type()) {
    // required .moos.dawg.Status.VehicleType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t StatusWithoutDynamicConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.dawg.StatusWithoutDynamicConditions)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);

    // required .moos.dawg.Status.VehicleType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *airplane_detection_);
    }

    // optional double temperature = 3 [(.dccl.field) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusWithoutDynamicConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.dawg.StatusWithoutDynamicConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusWithoutDynamicConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusWithoutDynamicConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.dawg.StatusWithoutDynamicConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.dawg.StatusWithoutDynamicConditions)
    MergeFrom(*source);
  }
}

void StatusWithoutDynamicConditions::MergeFrom(const StatusWithoutDynamicConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.dawg.StatusWithoutDynamicConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::moos::dawg::StatusWithoutDynamicConditions_Location::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_airplane_detection()->::moos::dawg::Status_AirplaneDetection::MergeFrom(from._internal_airplane_detection());
    }
    if (cached_has_bits & 0x00000004u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatusWithoutDynamicConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.dawg.StatusWithoutDynamicConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusWithoutDynamicConditions::CopyFrom(const StatusWithoutDynamicConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.dawg.StatusWithoutDynamicConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusWithoutDynamicConditions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_airplane_detection()) {
    if (!airplane_detection_->IsInitialized()) return false;
  }
  return true;
}

void StatusWithoutDynamicConditions::InternalSwap(StatusWithoutDynamicConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusWithoutDynamicConditions, temperature_)
      + sizeof(StatusWithoutDynamicConditions::temperature_)
      - PROTOBUF_FIELD_OFFSET(StatusWithoutDynamicConditions, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusWithoutDynamicConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dawg
}  // namespace moos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::moos::dawg::Status_Location* Arena::CreateMaybeMessage< ::moos::dawg::Status_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::dawg::Status_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::moos::dawg::Status_AirplaneDetection* Arena::CreateMaybeMessage< ::moos::dawg::Status_AirplaneDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::dawg::Status_AirplaneDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::moos::dawg::Status* Arena::CreateMaybeMessage< ::moos::dawg::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::dawg::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::moos::dawg::StatusWithoutDynamicConditions_Location* Arena::CreateMaybeMessage< ::moos::dawg::StatusWithoutDynamicConditions_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::dawg::StatusWithoutDynamicConditions_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::moos::dawg::StatusWithoutDynamicConditions* Arena::CreateMaybeMessage< ::moos::dawg::StatusWithoutDynamicConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::dawg::StatusWithoutDynamicConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
