// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dccl/option_extensions.pb.h"
#include <boost/units/quantity.hpp>
#include <boost/units/absolute.hpp>
#include <boost/units/dimensionless_type.hpp>
#include <boost/units/make_scaled_unit.hpp>

#include <boost/units/systems/temperature/celsius.hpp>

#include <boost/units/systems/si.hpp>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto;
namespace moos {
namespace dawg {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StatusWithoutDynamicConditions;
class StatusWithoutDynamicConditionsDefaultTypeInternal;
extern StatusWithoutDynamicConditionsDefaultTypeInternal _StatusWithoutDynamicConditions_default_instance_;
class StatusWithoutDynamicConditions_Location;
class StatusWithoutDynamicConditions_LocationDefaultTypeInternal;
extern StatusWithoutDynamicConditions_LocationDefaultTypeInternal _StatusWithoutDynamicConditions_Location_default_instance_;
class Status_AirplaneDetection;
class Status_AirplaneDetectionDefaultTypeInternal;
extern Status_AirplaneDetectionDefaultTypeInternal _Status_AirplaneDetection_default_instance_;
class Status_Location;
class Status_LocationDefaultTypeInternal;
extern Status_LocationDefaultTypeInternal _Status_Location_default_instance_;
}  // namespace dawg
}  // namespace moos
PROTOBUF_NAMESPACE_OPEN
template<> ::moos::dawg::Status* Arena::CreateMaybeMessage<::moos::dawg::Status>(Arena*);
template<> ::moos::dawg::StatusWithoutDynamicConditions* Arena::CreateMaybeMessage<::moos::dawg::StatusWithoutDynamicConditions>(Arena*);
template<> ::moos::dawg::StatusWithoutDynamicConditions_Location* Arena::CreateMaybeMessage<::moos::dawg::StatusWithoutDynamicConditions_Location>(Arena*);
template<> ::moos::dawg::Status_AirplaneDetection* Arena::CreateMaybeMessage<::moos::dawg::Status_AirplaneDetection>(Arena*);
template<> ::moos::dawg::Status_Location* Arena::CreateMaybeMessage<::moos::dawg::Status_Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace moos {
namespace dawg {

enum Status_VehicleType : int {
  Status_VehicleType_USV = 1,
  Status_VehicleType_AUV_WITH_CTD = 2,
  Status_VehicleType_AUV_WITH_SONAR = 3,
  Status_VehicleType_DEEP_AUV = 4
};
bool Status_VehicleType_IsValid(int value);
constexpr Status_VehicleType Status_VehicleType_VehicleType_MIN = Status_VehicleType_USV;
constexpr Status_VehicleType Status_VehicleType_VehicleType_MAX = Status_VehicleType_DEEP_AUV;
constexpr int Status_VehicleType_VehicleType_ARRAYSIZE = Status_VehicleType_VehicleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_VehicleType_descriptor();
template<typename T>
inline const std::string& Status_VehicleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_VehicleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_VehicleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_VehicleType_descriptor(), enum_t_value);
}
inline bool Status_VehicleType_Parse(
    const std::string& name, Status_VehicleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_VehicleType>(
    Status_VehicleType_descriptor(), name, value);
}
// ===================================================================

class Status_Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.dawg.Status.Location) */ {
 public:
  inline Status_Location() : Status_Location(nullptr) {};
  virtual ~Status_Location();

  Status_Location(const Status_Location& from);
  Status_Location(Status_Location&& from) noexcept
    : Status_Location() {
    *this = ::std::move(from);
  }

  inline Status_Location& operator=(const Status_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status_Location& operator=(Status_Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status_Location* internal_default_instance() {
    return reinterpret_cast<const Status_Location*>(
               &_Status_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status_Location& a, Status_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Status_Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status_Location* New() const final {
    return CreateMaybeMessage<Status_Location>(nullptr);
  }

  Status_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status_Location& from);
  void MergeFrom(const Status_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.dawg.Status.Location";
  }
  protected:
  explicit Status_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // required int32 x = 1 [(.dccl.field) = {
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2 [(.dccl.field) = {
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 depth = 3 [(.dccl.field) = {
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  typedef boost::units::length_dimension x_dimension;
  
  typedef boost::units::unit<x_dimension,boost::units::si::system> x_unit;
  
  template<typename Quantity >
    void set_x_with_units(Quantity value_w_units)
    { set_x(boost::units::quantity<x_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity x_with_units() const
    { return Quantity(x() * x_unit()); };
  
  boost::units::quantity< x_unit,google::protobuf::int32 > x_with_units() const
    { return x_with_units<boost::units::quantity< x_unit,google::protobuf::int32 > >(); };
  
  typedef boost::units::length_dimension y_dimension;
  
  typedef boost::units::unit<y_dimension,boost::units::si::system> y_unit;
  
  template<typename Quantity >
    void set_y_with_units(Quantity value_w_units)
    { set_y(boost::units::quantity<y_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity y_with_units() const
    { return Quantity(y() * y_unit()); };
  
  boost::units::quantity< y_unit,google::protobuf::int32 > y_with_units() const
    { return y_with_units<boost::units::quantity< y_unit,google::protobuf::int32 > >(); };
  
  typedef boost::units::length_dimension depth_dimension;
  
  typedef boost::units::unit<depth_dimension,boost::units::si::system> depth_unit;
  
  template<typename Quantity >
    void set_depth_with_units(Quantity value_w_units)
    { set_depth(boost::units::quantity<depth_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity depth_with_units() const
    { return Quantity(depth() * depth_unit()); };
  
  boost::units::quantity< depth_unit,google::protobuf::int32 > depth_with_units() const
    { return depth_with_units<boost::units::quantity< depth_unit,google::protobuf::int32 > >(); };
  
  // @@protoc_insertion_point(class_scope:moos.dawg.Status.Location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class Status_AirplaneDetection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.dawg.Status.AirplaneDetection) */ {
 public:
  inline Status_AirplaneDetection() : Status_AirplaneDetection(nullptr) {};
  virtual ~Status_AirplaneDetection();

  Status_AirplaneDetection(const Status_AirplaneDetection& from);
  Status_AirplaneDetection(Status_AirplaneDetection&& from) noexcept
    : Status_AirplaneDetection() {
    *this = ::std::move(from);
  }

  inline Status_AirplaneDetection& operator=(const Status_AirplaneDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status_AirplaneDetection& operator=(Status_AirplaneDetection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status_AirplaneDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status_AirplaneDetection* internal_default_instance() {
    return reinterpret_cast<const Status_AirplaneDetection*>(
               &_Status_AirplaneDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Status_AirplaneDetection& a, Status_AirplaneDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(Status_AirplaneDetection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status_AirplaneDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status_AirplaneDetection* New() const final {
    return CreateMaybeMessage<Status_AirplaneDetection>(nullptr);
  }

  Status_AirplaneDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status_AirplaneDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status_AirplaneDetection& from);
  void MergeFrom(const Status_AirplaneDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status_AirplaneDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.dawg.Status.AirplaneDetection";
  }
  protected:
  explicit Status_AirplaneDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectedDepthFieldNumber = 1,
    kDetectedFreqFieldNumber = 2,
  };
  // required int32 detected_depth = 1 [(.dccl.field) = {
  bool has_detected_depth() const;
  private:
  bool _internal_has_detected_depth() const;
  public:
  void clear_detected_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 detected_depth() const;
  void set_detected_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detected_depth() const;
  void _internal_set_detected_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 detected_freq = 2 [(.dccl.field) = {
  bool has_detected_freq() const;
  private:
  bool _internal_has_detected_freq() const;
  public:
  void clear_detected_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 detected_freq() const;
  void set_detected_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detected_freq() const;
  void _internal_set_detected_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  typedef boost::units::length_dimension detected_depth_dimension;
  
  typedef boost::units::unit<detected_depth_dimension,boost::units::si::system> detected_depth_unit;
  
  template<typename Quantity >
    void set_detected_depth_with_units(Quantity value_w_units)
    { set_detected_depth(boost::units::quantity<detected_depth_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity detected_depth_with_units() const
    { return Quantity(detected_depth() * detected_depth_unit()); };
  
  boost::units::quantity< detected_depth_unit,google::protobuf::int32 > detected_depth_with_units() const
    { return detected_depth_with_units<boost::units::quantity< detected_depth_unit,google::protobuf::int32 > >(); };
  
  typedef boost::units::frequency_dimension detected_freq_dimension;
  
  typedef boost::units::unit<detected_freq_dimension,boost::units::si::system> detected_freq_unit;
  
  template<typename Quantity >
    void set_detected_freq_with_units(Quantity value_w_units)
    { set_detected_freq(boost::units::quantity<detected_freq_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity detected_freq_with_units() const
    { return Quantity(detected_freq() * detected_freq_unit()); };
  
  boost::units::quantity< detected_freq_unit,google::protobuf::int32 > detected_freq_with_units() const
    { return detected_freq_with_units<boost::units::quantity< detected_freq_unit,google::protobuf::int32 > >(); };
  
  // @@protoc_insertion_point(class_scope:moos.dawg.Status.AirplaneDetection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 detected_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 detected_freq_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.dawg.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.dawg.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_Location Location;
  typedef Status_AirplaneDetection AirplaneDetection;

  typedef Status_VehicleType VehicleType;
  static constexpr VehicleType USV =
    Status_VehicleType_USV;
  static constexpr VehicleType AUV_WITH_CTD =
    Status_VehicleType_AUV_WITH_CTD;
  static constexpr VehicleType AUV_WITH_SONAR =
    Status_VehicleType_AUV_WITH_SONAR;
  static constexpr VehicleType DEEP_AUV =
    Status_VehicleType_DEEP_AUV;
  static inline bool VehicleType_IsValid(int value) {
    return Status_VehicleType_IsValid(value);
  }
  static constexpr VehicleType VehicleType_MIN =
    Status_VehicleType_VehicleType_MIN;
  static constexpr VehicleType VehicleType_MAX =
    Status_VehicleType_VehicleType_MAX;
  static constexpr int VehicleType_ARRAYSIZE =
    Status_VehicleType_VehicleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VehicleType_descriptor() {
    return Status_VehicleType_descriptor();
  }
  template<typename T>
  static inline const std::string& VehicleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehicleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehicleType_Name.");
    return Status_VehicleType_Name(enum_t_value);
  }
  static inline bool VehicleType_Parse(const std::string& name,
      VehicleType* value) {
    return Status_VehicleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kAirplaneDetectionFieldNumber = 4,
    kTemperatureFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // required .moos.dawg.Status.Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::moos::dawg::Status_Location& location() const;
  ::moos::dawg::Status_Location* release_location();
  ::moos::dawg::Status_Location* mutable_location();
  void set_allocated_location(::moos::dawg::Status_Location* location);
  private:
  const ::moos::dawg::Status_Location& _internal_location() const;
  ::moos::dawg::Status_Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::moos::dawg::Status_Location* location);
  ::moos::dawg::Status_Location* unsafe_arena_release_location();

  // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4 [(.dccl.field) = {
  bool has_airplane_detection() const;
  private:
  bool _internal_has_airplane_detection() const;
  public:
  void clear_airplane_detection();
  const ::moos::dawg::Status_AirplaneDetection& airplane_detection() const;
  ::moos::dawg::Status_AirplaneDetection* release_airplane_detection();
  ::moos::dawg::Status_AirplaneDetection* mutable_airplane_detection();
  void set_allocated_airplane_detection(::moos::dawg::Status_AirplaneDetection* airplane_detection);
  private:
  const ::moos::dawg::Status_AirplaneDetection& _internal_airplane_detection() const;
  ::moos::dawg::Status_AirplaneDetection* _internal_mutable_airplane_detection();
  public:
  void unsafe_arena_set_allocated_airplane_detection(
      ::moos::dawg::Status_AirplaneDetection* airplane_detection);
  ::moos::dawg::Status_AirplaneDetection* unsafe_arena_release_airplane_detection();

  // optional double temperature = 3 [(.dccl.field) = {
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // required .moos.dawg.Status.VehicleType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::moos::dawg::Status_VehicleType type() const;
  void set_type(::moos::dawg::Status_VehicleType value);
  private:
  ::moos::dawg::Status_VehicleType _internal_type() const;
  void _internal_set_type(::moos::dawg::Status_VehicleType value);
  public:

  enum DCCLParameters { DCCL_ID = 126,  DCCL_MAX_BYTES = 32 };
  typedef boost::units::temperature_dimension temperature_dimension;
  
  typedef boost::units::absolute<boost::units::unit<temperature_dimension,boost::units::celsius::system> > temperature_unit;
  
  template<typename Quantity >
    void set_temperature_with_units(Quantity value_w_units)
    { set_temperature(boost::units::quantity<temperature_unit,double >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity temperature_with_units() const
    { return Quantity(temperature() * temperature_unit()); };
  
  boost::units::quantity< temperature_unit,double > temperature_with_units() const
    { return temperature_with_units<boost::units::quantity< temperature_unit,double > >(); };
  
  // @@protoc_insertion_point(class_scope:moos.dawg.Status)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::moos::dawg::Status_Location* location_;
  ::moos::dawg::Status_AirplaneDetection* airplane_detection_;
  double temperature_;
  int type_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class StatusWithoutDynamicConditions_Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.dawg.StatusWithoutDynamicConditions.Location) */ {
 public:
  inline StatusWithoutDynamicConditions_Location() : StatusWithoutDynamicConditions_Location(nullptr) {};
  virtual ~StatusWithoutDynamicConditions_Location();

  StatusWithoutDynamicConditions_Location(const StatusWithoutDynamicConditions_Location& from);
  StatusWithoutDynamicConditions_Location(StatusWithoutDynamicConditions_Location&& from) noexcept
    : StatusWithoutDynamicConditions_Location() {
    *this = ::std::move(from);
  }

  inline StatusWithoutDynamicConditions_Location& operator=(const StatusWithoutDynamicConditions_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusWithoutDynamicConditions_Location& operator=(StatusWithoutDynamicConditions_Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusWithoutDynamicConditions_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusWithoutDynamicConditions_Location* internal_default_instance() {
    return reinterpret_cast<const StatusWithoutDynamicConditions_Location*>(
               &_StatusWithoutDynamicConditions_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StatusWithoutDynamicConditions_Location& a, StatusWithoutDynamicConditions_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusWithoutDynamicConditions_Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusWithoutDynamicConditions_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusWithoutDynamicConditions_Location* New() const final {
    return CreateMaybeMessage<StatusWithoutDynamicConditions_Location>(nullptr);
  }

  StatusWithoutDynamicConditions_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusWithoutDynamicConditions_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusWithoutDynamicConditions_Location& from);
  void MergeFrom(const StatusWithoutDynamicConditions_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusWithoutDynamicConditions_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.dawg.StatusWithoutDynamicConditions.Location";
  }
  protected:
  explicit StatusWithoutDynamicConditions_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // required int32 x = 1 [(.dccl.field) = {
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2 [(.dccl.field) = {
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 depth = 3 [(.dccl.field) = {
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  typedef boost::units::length_dimension x_dimension;
  
  typedef boost::units::unit<x_dimension,boost::units::si::system> x_unit;
  
  template<typename Quantity >
    void set_x_with_units(Quantity value_w_units)
    { set_x(boost::units::quantity<x_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity x_with_units() const
    { return Quantity(x() * x_unit()); };
  
  boost::units::quantity< x_unit,google::protobuf::int32 > x_with_units() const
    { return x_with_units<boost::units::quantity< x_unit,google::protobuf::int32 > >(); };
  
  typedef boost::units::length_dimension y_dimension;
  
  typedef boost::units::unit<y_dimension,boost::units::si::system> y_unit;
  
  template<typename Quantity >
    void set_y_with_units(Quantity value_w_units)
    { set_y(boost::units::quantity<y_unit,google::protobuf::int32 >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity y_with_units() const
    { return Quantity(y() * y_unit()); };
  
  boost::units::quantity< y_unit,google::protobuf::int32 > y_with_units() const
    { return y_with_units<boost::units::quantity< y_unit,google::protobuf::int32 > >(); };
  
  // @@protoc_insertion_point(class_scope:moos.dawg.StatusWithoutDynamicConditions.Location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class StatusWithoutDynamicConditions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.dawg.StatusWithoutDynamicConditions) */ {
 public:
  inline StatusWithoutDynamicConditions() : StatusWithoutDynamicConditions(nullptr) {};
  virtual ~StatusWithoutDynamicConditions();

  StatusWithoutDynamicConditions(const StatusWithoutDynamicConditions& from);
  StatusWithoutDynamicConditions(StatusWithoutDynamicConditions&& from) noexcept
    : StatusWithoutDynamicConditions() {
    *this = ::std::move(from);
  }

  inline StatusWithoutDynamicConditions& operator=(const StatusWithoutDynamicConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusWithoutDynamicConditions& operator=(StatusWithoutDynamicConditions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusWithoutDynamicConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusWithoutDynamicConditions* internal_default_instance() {
    return reinterpret_cast<const StatusWithoutDynamicConditions*>(
               &_StatusWithoutDynamicConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatusWithoutDynamicConditions& a, StatusWithoutDynamicConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusWithoutDynamicConditions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusWithoutDynamicConditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusWithoutDynamicConditions* New() const final {
    return CreateMaybeMessage<StatusWithoutDynamicConditions>(nullptr);
  }

  StatusWithoutDynamicConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusWithoutDynamicConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusWithoutDynamicConditions& from);
  void MergeFrom(const StatusWithoutDynamicConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusWithoutDynamicConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.dawg.StatusWithoutDynamicConditions";
  }
  protected:
  explicit StatusWithoutDynamicConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatusWithoutDynamicConditions_Location Location;

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kAirplaneDetectionFieldNumber = 4,
    kTemperatureFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::moos::dawg::StatusWithoutDynamicConditions_Location& location() const;
  ::moos::dawg::StatusWithoutDynamicConditions_Location* release_location();
  ::moos::dawg::StatusWithoutDynamicConditions_Location* mutable_location();
  void set_allocated_location(::moos::dawg::StatusWithoutDynamicConditions_Location* location);
  private:
  const ::moos::dawg::StatusWithoutDynamicConditions_Location& _internal_location() const;
  ::moos::dawg::StatusWithoutDynamicConditions_Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::moos::dawg::StatusWithoutDynamicConditions_Location* location);
  ::moos::dawg::StatusWithoutDynamicConditions_Location* unsafe_arena_release_location();

  // optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4;
  bool has_airplane_detection() const;
  private:
  bool _internal_has_airplane_detection() const;
  public:
  void clear_airplane_detection();
  const ::moos::dawg::Status_AirplaneDetection& airplane_detection() const;
  ::moos::dawg::Status_AirplaneDetection* release_airplane_detection();
  ::moos::dawg::Status_AirplaneDetection* mutable_airplane_detection();
  void set_allocated_airplane_detection(::moos::dawg::Status_AirplaneDetection* airplane_detection);
  private:
  const ::moos::dawg::Status_AirplaneDetection& _internal_airplane_detection() const;
  ::moos::dawg::Status_AirplaneDetection* _internal_mutable_airplane_detection();
  public:
  void unsafe_arena_set_allocated_airplane_detection(
      ::moos::dawg::Status_AirplaneDetection* airplane_detection);
  ::moos::dawg::Status_AirplaneDetection* unsafe_arena_release_airplane_detection();

  // optional double temperature = 3 [(.dccl.field) = {
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // required .moos.dawg.Status.VehicleType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::moos::dawg::Status_VehicleType type() const;
  void set_type(::moos::dawg::Status_VehicleType value);
  private:
  ::moos::dawg::Status_VehicleType _internal_type() const;
  void _internal_set_type(::moos::dawg::Status_VehicleType value);
  public:

  enum DCCLParameters { DCCL_ID = 127,  DCCL_MAX_BYTES = 32 };
  typedef boost::units::temperature_dimension temperature_dimension;
  
  typedef boost::units::absolute<boost::units::unit<temperature_dimension,boost::units::celsius::system> > temperature_unit;
  
  template<typename Quantity >
    void set_temperature_with_units(Quantity value_w_units)
    { set_temperature(boost::units::quantity<temperature_unit,double >(value_w_units).value() ); };
  
  template<typename Quantity >
    Quantity temperature_with_units() const
    { return Quantity(temperature() * temperature_unit()); };
  
  boost::units::quantity< temperature_unit,double > temperature_with_units() const
    { return temperature_with_units<boost::units::quantity< temperature_unit,double > >(); };
  
  // @@protoc_insertion_point(class_scope:moos.dawg.StatusWithoutDynamicConditions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::moos::dawg::StatusWithoutDynamicConditions_Location* location_;
  ::moos::dawg::Status_AirplaneDetection* airplane_detection_;
  double temperature_;
  int type_;
  friend struct ::TableStruct_status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status_Location

// required int32 x = 1 [(.dccl.field) = {
inline bool Status_Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status_Location::has_x() const {
  return _internal_has_x();
}
inline void Status_Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::x() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.Location.x)
  return _internal_x();
}
inline void Status_Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Status_Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.Location.x)
}

// required int32 y = 2 [(.dccl.field) = {
inline bool Status_Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status_Location::has_y() const {
  return _internal_has_y();
}
inline void Status_Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::y() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.Location.y)
  return _internal_y();
}
inline void Status_Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Status_Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.Location.y)
}

// optional int32 depth = 3 [(.dccl.field) = {
inline bool Status_Location::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status_Location::has_depth() const {
  return _internal_has_depth();
}
inline void Status_Location::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_Location::depth() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.Location.depth)
  return _internal_depth();
}
inline void Status_Location::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  depth_ = value;
}
inline void Status_Location::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.Location.depth)
}

// -------------------------------------------------------------------

// Status_AirplaneDetection

// required int32 detected_depth = 1 [(.dccl.field) = {
inline bool Status_AirplaneDetection::_internal_has_detected_depth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status_AirplaneDetection::has_detected_depth() const {
  return _internal_has_detected_depth();
}
inline void Status_AirplaneDetection::clear_detected_depth() {
  detected_depth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_AirplaneDetection::_internal_detected_depth() const {
  return detected_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_AirplaneDetection::detected_depth() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.AirplaneDetection.detected_depth)
  return _internal_detected_depth();
}
inline void Status_AirplaneDetection::_internal_set_detected_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  detected_depth_ = value;
}
inline void Status_AirplaneDetection::set_detected_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detected_depth(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.AirplaneDetection.detected_depth)
}

// required int32 detected_freq = 2 [(.dccl.field) = {
inline bool Status_AirplaneDetection::_internal_has_detected_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status_AirplaneDetection::has_detected_freq() const {
  return _internal_has_detected_freq();
}
inline void Status_AirplaneDetection::clear_detected_freq() {
  detected_freq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_AirplaneDetection::_internal_detected_freq() const {
  return detected_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status_AirplaneDetection::detected_freq() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.AirplaneDetection.detected_freq)
  return _internal_detected_freq();
}
inline void Status_AirplaneDetection::_internal_set_detected_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  detected_freq_ = value;
}
inline void Status_AirplaneDetection::set_detected_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detected_freq(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.AirplaneDetection.detected_freq)
}

// -------------------------------------------------------------------

// Status

// required .moos.dawg.Status.VehicleType type = 1;
inline bool Status::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_type() const {
  return _internal_has_type();
}
inline void Status::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::moos::dawg::Status_VehicleType Status::_internal_type() const {
  return static_cast< ::moos::dawg::Status_VehicleType >(type_);
}
inline ::moos::dawg::Status_VehicleType Status::type() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.type)
  return _internal_type();
}
inline void Status::_internal_set_type(::moos::dawg::Status_VehicleType value) {
  assert(::moos::dawg::Status_VehicleType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Status::set_type(::moos::dawg::Status_VehicleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.type)
}

// required .moos.dawg.Status.Location location = 2;
inline bool Status::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool Status::has_location() const {
  return _internal_has_location();
}
inline void Status::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::moos::dawg::Status_Location& Status::_internal_location() const {
  const ::moos::dawg::Status_Location* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::moos::dawg::Status_Location*>(
      &::moos::dawg::_Status_Location_default_instance_);
}
inline const ::moos::dawg::Status_Location& Status::location() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.location)
  return _internal_location();
}
inline void Status::unsafe_arena_set_allocated_location(
    ::moos::dawg::Status_Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.dawg.Status.location)
}
inline ::moos::dawg::Status_Location* Status::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::moos::dawg::Status_Location* Status::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:moos.dawg.Status.location)
  _has_bits_[0] &= ~0x00000001u;
  ::moos::dawg::Status_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::moos::dawg::Status_Location* Status::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::moos::dawg::Status_Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::moos::dawg::Status_Location* Status::mutable_location() {
  // @@protoc_insertion_point(field_mutable:moos.dawg.Status.location)
  return _internal_mutable_location();
}
inline void Status::set_allocated_location(::moos::dawg::Status_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:moos.dawg.Status.location)
}

// optional double temperature = 3 [(.dccl.field) = {
inline bool Status::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_temperature() const {
  return _internal_has_temperature();
}
inline void Status::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Status::_internal_temperature() const {
  return temperature_;
}
inline double Status::temperature() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.temperature)
  return _internal_temperature();
}
inline void Status::_internal_set_temperature(double value) {
  _has_bits_[0] |= 0x00000004u;
  temperature_ = value;
}
inline void Status::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:moos.dawg.Status.temperature)
}

// optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4 [(.dccl.field) = {
inline bool Status::_internal_has_airplane_detection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || airplane_detection_ != nullptr);
  return value;
}
inline bool Status::has_airplane_detection() const {
  return _internal_has_airplane_detection();
}
inline void Status::clear_airplane_detection() {
  if (airplane_detection_ != nullptr) airplane_detection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::moos::dawg::Status_AirplaneDetection& Status::_internal_airplane_detection() const {
  const ::moos::dawg::Status_AirplaneDetection* p = airplane_detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::moos::dawg::Status_AirplaneDetection*>(
      &::moos::dawg::_Status_AirplaneDetection_default_instance_);
}
inline const ::moos::dawg::Status_AirplaneDetection& Status::airplane_detection() const {
  // @@protoc_insertion_point(field_get:moos.dawg.Status.airplane_detection)
  return _internal_airplane_detection();
}
inline void Status::unsafe_arena_set_allocated_airplane_detection(
    ::moos::dawg::Status_AirplaneDetection* airplane_detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airplane_detection_);
  }
  airplane_detection_ = airplane_detection;
  if (airplane_detection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.dawg.Status.airplane_detection)
}
inline ::moos::dawg::Status_AirplaneDetection* Status::release_airplane_detection() {
  auto temp = unsafe_arena_release_airplane_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::moos::dawg::Status_AirplaneDetection* Status::unsafe_arena_release_airplane_detection() {
  // @@protoc_insertion_point(field_release:moos.dawg.Status.airplane_detection)
  _has_bits_[0] &= ~0x00000002u;
  ::moos::dawg::Status_AirplaneDetection* temp = airplane_detection_;
  airplane_detection_ = nullptr;
  return temp;
}
inline ::moos::dawg::Status_AirplaneDetection* Status::_internal_mutable_airplane_detection() {
  _has_bits_[0] |= 0x00000002u;
  if (airplane_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::moos::dawg::Status_AirplaneDetection>(GetArena());
    airplane_detection_ = p;
  }
  return airplane_detection_;
}
inline ::moos::dawg::Status_AirplaneDetection* Status::mutable_airplane_detection() {
  // @@protoc_insertion_point(field_mutable:moos.dawg.Status.airplane_detection)
  return _internal_mutable_airplane_detection();
}
inline void Status::set_allocated_airplane_detection(::moos::dawg::Status_AirplaneDetection* airplane_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete airplane_detection_;
  }
  if (airplane_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(airplane_detection);
    if (message_arena != submessage_arena) {
      airplane_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airplane_detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  airplane_detection_ = airplane_detection;
  // @@protoc_insertion_point(field_set_allocated:moos.dawg.Status.airplane_detection)
}

// -------------------------------------------------------------------

// StatusWithoutDynamicConditions_Location

// required int32 x = 1 [(.dccl.field) = {
inline bool StatusWithoutDynamicConditions_Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusWithoutDynamicConditions_Location::has_x() const {
  return _internal_has_x();
}
inline void StatusWithoutDynamicConditions_Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::x() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.Location.x)
  return _internal_x();
}
inline void StatusWithoutDynamicConditions_Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void StatusWithoutDynamicConditions_Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:moos.dawg.StatusWithoutDynamicConditions.Location.x)
}

// required int32 y = 2 [(.dccl.field) = {
inline bool StatusWithoutDynamicConditions_Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusWithoutDynamicConditions_Location::has_y() const {
  return _internal_has_y();
}
inline void StatusWithoutDynamicConditions_Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::y() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.Location.y)
  return _internal_y();
}
inline void StatusWithoutDynamicConditions_Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void StatusWithoutDynamicConditions_Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:moos.dawg.StatusWithoutDynamicConditions.Location.y)
}

// optional int32 depth = 3 [(.dccl.field) = {
inline bool StatusWithoutDynamicConditions_Location::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatusWithoutDynamicConditions_Location::has_depth() const {
  return _internal_has_depth();
}
inline void StatusWithoutDynamicConditions_Location::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusWithoutDynamicConditions_Location::depth() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.Location.depth)
  return _internal_depth();
}
inline void StatusWithoutDynamicConditions_Location::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  depth_ = value;
}
inline void StatusWithoutDynamicConditions_Location::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:moos.dawg.StatusWithoutDynamicConditions.Location.depth)
}

// -------------------------------------------------------------------

// StatusWithoutDynamicConditions

// required .moos.dawg.Status.VehicleType type = 1;
inline bool StatusWithoutDynamicConditions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatusWithoutDynamicConditions::has_type() const {
  return _internal_has_type();
}
inline void StatusWithoutDynamicConditions::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::moos::dawg::Status_VehicleType StatusWithoutDynamicConditions::_internal_type() const {
  return static_cast< ::moos::dawg::Status_VehicleType >(type_);
}
inline ::moos::dawg::Status_VehicleType StatusWithoutDynamicConditions::type() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.type)
  return _internal_type();
}
inline void StatusWithoutDynamicConditions::_internal_set_type(::moos::dawg::Status_VehicleType value) {
  assert(::moos::dawg::Status_VehicleType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void StatusWithoutDynamicConditions::set_type(::moos::dawg::Status_VehicleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:moos.dawg.StatusWithoutDynamicConditions.type)
}

// required .moos.dawg.StatusWithoutDynamicConditions.Location location = 2;
inline bool StatusWithoutDynamicConditions::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool StatusWithoutDynamicConditions::has_location() const {
  return _internal_has_location();
}
inline void StatusWithoutDynamicConditions::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::moos::dawg::StatusWithoutDynamicConditions_Location& StatusWithoutDynamicConditions::_internal_location() const {
  const ::moos::dawg::StatusWithoutDynamicConditions_Location* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::moos::dawg::StatusWithoutDynamicConditions_Location*>(
      &::moos::dawg::_StatusWithoutDynamicConditions_Location_default_instance_);
}
inline const ::moos::dawg::StatusWithoutDynamicConditions_Location& StatusWithoutDynamicConditions::location() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.location)
  return _internal_location();
}
inline void StatusWithoutDynamicConditions::unsafe_arena_set_allocated_location(
    ::moos::dawg::StatusWithoutDynamicConditions_Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.dawg.StatusWithoutDynamicConditions.location)
}
inline ::moos::dawg::StatusWithoutDynamicConditions_Location* StatusWithoutDynamicConditions::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::moos::dawg::StatusWithoutDynamicConditions_Location* StatusWithoutDynamicConditions::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:moos.dawg.StatusWithoutDynamicConditions.location)
  _has_bits_[0] &= ~0x00000001u;
  ::moos::dawg::StatusWithoutDynamicConditions_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::moos::dawg::StatusWithoutDynamicConditions_Location* StatusWithoutDynamicConditions::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::moos::dawg::StatusWithoutDynamicConditions_Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::moos::dawg::StatusWithoutDynamicConditions_Location* StatusWithoutDynamicConditions::mutable_location() {
  // @@protoc_insertion_point(field_mutable:moos.dawg.StatusWithoutDynamicConditions.location)
  return _internal_mutable_location();
}
inline void StatusWithoutDynamicConditions::set_allocated_location(::moos::dawg::StatusWithoutDynamicConditions_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:moos.dawg.StatusWithoutDynamicConditions.location)
}

// optional double temperature = 3 [(.dccl.field) = {
inline bool StatusWithoutDynamicConditions::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatusWithoutDynamicConditions::has_temperature() const {
  return _internal_has_temperature();
}
inline void StatusWithoutDynamicConditions::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double StatusWithoutDynamicConditions::_internal_temperature() const {
  return temperature_;
}
inline double StatusWithoutDynamicConditions::temperature() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.temperature)
  return _internal_temperature();
}
inline void StatusWithoutDynamicConditions::_internal_set_temperature(double value) {
  _has_bits_[0] |= 0x00000004u;
  temperature_ = value;
}
inline void StatusWithoutDynamicConditions::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:moos.dawg.StatusWithoutDynamicConditions.temperature)
}

// optional .moos.dawg.Status.AirplaneDetection airplane_detection = 4;
inline bool StatusWithoutDynamicConditions::_internal_has_airplane_detection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || airplane_detection_ != nullptr);
  return value;
}
inline bool StatusWithoutDynamicConditions::has_airplane_detection() const {
  return _internal_has_airplane_detection();
}
inline void StatusWithoutDynamicConditions::clear_airplane_detection() {
  if (airplane_detection_ != nullptr) airplane_detection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::moos::dawg::Status_AirplaneDetection& StatusWithoutDynamicConditions::_internal_airplane_detection() const {
  const ::moos::dawg::Status_AirplaneDetection* p = airplane_detection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::moos::dawg::Status_AirplaneDetection*>(
      &::moos::dawg::_Status_AirplaneDetection_default_instance_);
}
inline const ::moos::dawg::Status_AirplaneDetection& StatusWithoutDynamicConditions::airplane_detection() const {
  // @@protoc_insertion_point(field_get:moos.dawg.StatusWithoutDynamicConditions.airplane_detection)
  return _internal_airplane_detection();
}
inline void StatusWithoutDynamicConditions::unsafe_arena_set_allocated_airplane_detection(
    ::moos::dawg::Status_AirplaneDetection* airplane_detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airplane_detection_);
  }
  airplane_detection_ = airplane_detection;
  if (airplane_detection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.dawg.StatusWithoutDynamicConditions.airplane_detection)
}
inline ::moos::dawg::Status_AirplaneDetection* StatusWithoutDynamicConditions::release_airplane_detection() {
  auto temp = unsafe_arena_release_airplane_detection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::moos::dawg::Status_AirplaneDetection* StatusWithoutDynamicConditions::unsafe_arena_release_airplane_detection() {
  // @@protoc_insertion_point(field_release:moos.dawg.StatusWithoutDynamicConditions.airplane_detection)
  _has_bits_[0] &= ~0x00000002u;
  ::moos::dawg::Status_AirplaneDetection* temp = airplane_detection_;
  airplane_detection_ = nullptr;
  return temp;
}
inline ::moos::dawg::Status_AirplaneDetection* StatusWithoutDynamicConditions::_internal_mutable_airplane_detection() {
  _has_bits_[0] |= 0x00000002u;
  if (airplane_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::moos::dawg::Status_AirplaneDetection>(GetArena());
    airplane_detection_ = p;
  }
  return airplane_detection_;
}
inline ::moos::dawg::Status_AirplaneDetection* StatusWithoutDynamicConditions::mutable_airplane_detection() {
  // @@protoc_insertion_point(field_mutable:moos.dawg.StatusWithoutDynamicConditions.airplane_detection)
  return _internal_mutable_airplane_detection();
}
inline void StatusWithoutDynamicConditions::set_allocated_airplane_detection(::moos::dawg::Status_AirplaneDetection* airplane_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete airplane_detection_;
  }
  if (airplane_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(airplane_detection);
    if (message_arena != submessage_arena) {
      airplane_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airplane_detection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  airplane_detection_ = airplane_detection;
  // @@protoc_insertion_point(field_set_allocated:moos.dawg.StatusWithoutDynamicConditions.airplane_detection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dawg
}  // namespace moos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::moos::dawg::Status_VehicleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::moos::dawg::Status_VehicleType>() {
  return ::moos::dawg::Status_VehicleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_status_2eproto
