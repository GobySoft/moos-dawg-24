syntax = "proto2";

import "dccl/option_extensions.proto";

package moos.dawg;

message Status
{
    option (dccl.msg) = {
        id: 126
        max_bytes: 32
        codec_version: 4
        unit_system: "si"
    };

    enum VehicleType
    {
        USV = 1;
        AUV_WITH_CTD = 2;    // with temperature probe
        AUV_WITH_SONAR = 3;  // with sonar
        DEEP_AUV = 4;        // with temperature probe
    }

    required VehicleType type = 1;

    message Location
    {
        required int32 x = 1 [(dccl.field) = {
            min: -10000
            max: 10000
            resolution: 1
            units: { derived_dimensions: "length" }
        }];
        required int32 y = 2 [(dccl.field) = {
            min: -10000
            max: 10000
            resolution: 1
            units: { derived_dimensions: "length" }
        }];
        optional int32 depth = 3 [(dccl.field) = {
            min: 0
            max: 5000

            dynamic_conditions {
                max: "if root.type == 'DEEP_AUV' then return 5000 else return 100 end"
                omit_if: "root.type == 'USV'"
            }

            resolution: 0.1
            units: { derived_dimensions: "length" }
        }];
    }

    required Location location = 2;

    optional double temperature = 3 [(dccl.field) = {
        min: 0
        max: 40
        resolution: 0.01
        units {
            derived_dimensions: "temperature"
            system: "celsius"
            relative_temperature: false
        }

        dynamic_conditions {
            only_if: "this.type == 'AUV_WITH_CTD' or this.type == 'DEEP_AUV'"
        }
    }];

    message AirplaneDetection
    {
        required int32 detected_depth = 1 [(dccl.field) = {
            min: 0
            max: 5000
            resolution: 0.1
            units: { derived_dimensions: "length" }
        }];
        required int32 detected_freq = 2 [(dccl.field) = {
            min: 30000
            max: 40000
            resolution: 100
            units { derived_dimensions: "frequency" }
        }];
    }

    optional AirplaneDetection airplane_detection = 4
        [(dccl.field).dynamic_conditions.only_if =
             "this.type == 'AUV_WITH_SONAR'"];
}

message StatusWithoutDynamicConditions
{
    option (dccl.msg) = {
        id: 127
        max_bytes: 32
        codec_version: 3
        unit_system: "si"
    };

    required Status.VehicleType type = 1;

    message Location
    {
        required int32 x = 1 [(dccl.field) = {
            min: -10000
            max: 10000
            resolution: 1
            units: { derived_dimensions: "length" }
        }];
        required int32 y = 2 [(dccl.field) = {
            min: -10000
            max: 10000
            resolution: 1
            units: { derived_dimensions: "length" }
        }];
        optional int32 depth = 3 [(dccl.field) = { min: 0 max: 5000 }];
    }

    required Location location = 2;

    optional double temperature = 3 [(dccl.field) = {
        min: 0
        max: 40
        resolution: 0.01
        units {
            derived_dimensions: "temperature"
            system: "celsius"
            relative_temperature: false
        }

    }];

    optional Status.AirplaneDetection airplane_detection = 4;
}
